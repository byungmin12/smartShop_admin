import React from 'react';import PageButton from "./PageButton";interface IPageNavigation {    paginationButtonNumber: number;    pageNumber: number;    pageLimit: number    handlerChangePageNumber: (direction? : "plus"| "minus") => (e:React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;}function PageNavigation({paginationButtonNumber,pageLimit, pageNumber, handlerChangePageNumber}:IPageNavigation) {    return (        <div className="pagiNation-Wrapper">            <PageButton isSelected={false} isDirection="minus" value="<" handlerChangePageNumber={handlerChangePageNumber} isDisabled={pageNumber===1} />            {                ((100/pageLimit)-pageNumber<= 5 && 100/pageLimit > paginationButtonNumber)  &&                <>                    <PageButton value={1} isSelected={pageNumber ===1} isDirection={undefined} handlerChangePageNumber={handlerChangePageNumber}  />                    ...                </>            }            {                Array(100/pageLimit < paginationButtonNumber ? 100/pageLimit : paginationButtonNumber).fill(0).map((_,idx)=>{                    if(100/pageLimit < paginationButtonNumber){                        return <PageButton isSelected={pageNumber=== idx+1 }  value={idx+1} handlerChangePageNumber={handlerChangePageNumber}                         key={idx+1}                        />                    }                    if(paginationButtonNumber ===5){                        if(pageNumber +3 >= 100 / pageLimit){                            return <PageButton isSelected={pageNumber === -1+idx+(100 / pageLimit) -3} value={(100 / pageLimit) -4+idx} handlerChangePageNumber={handlerChangePageNumber}                                               key={(100 / pageLimit) -4+idx}                            />                        }                        return <PageButton isSelected={pageNumber === idx+1 } value={ idx+1 } handlerChangePageNumber={handlerChangePageNumber}                        key={idx+1 }                        />                    }                    return <PageButton isSelected={pageNumber === (pageNumber-1) + idx} value={ (pageNumber-1) + idx} handlerChangePageNumber={handlerChangePageNumber} key={(pageNumber-1) + idx} />                })            }            {                ((pageNumber <= -4+(100 / pageLimit) ) && 100/pageLimit > paginationButtonNumber) &&                <>                    ...                    <PageButton isSelected={pageNumber === 100 / pageLimit} value={100 / pageLimit} handlerChangePageNumber={handlerChangePageNumber}/>                </>            }            <PageButton isSelected={false} isDisabled={pageNumber===100 / pageLimit} value=">" isDirection="plus" handlerChangePageNumber={handlerChangePageNumber} />        </div>    );}export default PageNavigation;