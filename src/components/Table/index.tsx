import React, { useEffect, useState} from 'react';import "../../styles/Table.css"import {useQuery} from "@tanstack/react-query";import TableHeader from "./TableHeader";import TableRow from "./TableRow";import Pagination from "../Pagination";import apis from "../../service/apis";import {IDataDto, IProduct} from "../../Dto/Dto";import {useAppDispatch, useAppSelector} from "../../hooks/reduxHook";import {setDataLength} from "../../slice/dataLength";const handlerCheckIncludes = (key: string, value: string | null): boolean => {    if (value !== null) {        const upperKey = key.toUpperCase()        const upperValue = value.toUpperCase()        return upperKey.includes(upperValue)    }    return false}function Table() {    const dispatch = useAppDispatch()    const [arrOfCurrButtons, setArrOfCurrButtons] = useState<Array<string|number>>([]);    const [perPage, setPerPage] = useState(10);    const [currentPage, setCurrentPage] = useState(1);    const randomRefresh = useAppSelector((state)=>state.randomRefresh)    const {        data,        isError,        isLoading    } = useQuery<IDataDto, any, IProduct[]>(["fetchingProductsData", randomRefresh], async () => apis.get("https://dummyjson.com/products?limit=100"), {            select: (selectedData) => {                const search = sessionStorage.getItem("search");                const category = sessionStorage.getItem("category");                switch (true) {                    case category === "상품명" && search !== "":                        return selectedData.products.filter((product) => handlerCheckIncludes(product.title, search)                        )                    case category === "브랜드" && search !== "":                        return selectedData.products.filter((product) => handlerCheckIncludes(product.brand, search))                    case category === "상품내용" && search !== "":                        return selectedData.products.filter((product) => handlerCheckIncludes(product.description, search))                    case category === "전체" && search !== "":                        return selectedData.products.filter((product) => handlerCheckIncludes(product.title, search) || handlerCheckIncludes(product.brand, search) || handlerCheckIncludes(product.description, search))                    default :                        return selectedData.products                }            }        }    )    const [pageItem, SetPageItem] = useState({        start: 0,        end: perPage    })    const onPageChangeEvent = (start:number, end: number) => {        SetPageItem({            start,            end        })    }    const numOfPages = data !== undefined ? Math.ceil(data.length / perPage) : 0   const handlerSetCurrentPage = (page:number) => ()=>{       setCurrentPage(()=>page)   }   const handlerSetArrOfCurrButtons = (newCurrentButtons:Array<string |number>) =>{       setArrOfCurrButtons(newCurrentButtons)   }    const handlerSetPerPage = (e: React.ChangeEvent<HTMLSelectElement>) => {        setPerPage(Number(e.target.value))    }        const handlerPrevNext = (direction: "prev" | "next")=> ()  =>{        if(direction==="prev"){            if (currentPage === 1) {                setCurrentPage(currentPage);            } else {                setCurrentPage(currentPage - 1);            }        }        else if (currentPage ===numOfPages) {            setCurrentPage(currentPage);        } else {            setCurrentPage(currentPage + 1);        }    }    useEffect(() => {        if(data !== undefined){            dispatch(setDataLength(data.length))        }    }, [data, dispatch]);    useEffect(() => {        let tempNumberOfButtons : Array<string|number> = []        const numOfButtons : number[] = Array.from({length: numOfPages}, (v, i) => i+1)        const dots = '...'        if (numOfButtons.length < 6) {            tempNumberOfButtons = numOfButtons        }        else if (currentPage >= 1 && currentPage <= 4) {            tempNumberOfButtons = [1, 2, 3, 4, 5 , dots, numOfButtons.length]        }        else if (currentPage > 4 && currentPage < numOfButtons.length - 2) {            const sliced1 = numOfButtons.slice(currentPage - 2, currentPage)            const sliced2 = numOfButtons.slice(currentPage, currentPage + 1)            tempNumberOfButtons = ([1, dots, ...sliced1, ...sliced2, dots, numOfButtons.length])        }        else if (currentPage > numOfButtons.length - 3) {            const sliced = numOfButtons.slice(numOfButtons.length - 4)            tempNumberOfButtons = ([1, dots, ...sliced])        }        handlerSetArrOfCurrButtons(tempNumberOfButtons);        const value = currentPage * perPage;        onPageChangeEvent(value - perPage, value)    }, [currentPage, perPage, numOfPages]);    return (        <table className="table-wrapper">            <TableHeader fields={["상품번호", "상품명", "브랜드", "상품내용", "가격", "평점", "재고"]}/>            <tbody>            {                isLoading &&                <tr>                    <td colSpan={7}>Loading...</td>                </tr>            }            {                isError &&                <tr>                    <td colSpan={7}>에러가 발생했습니다.</td>                </tr>            }            {                data?.slice(pageItem.start, pageItem.end).map((product) => (                    <TableRow id={product.id} title={product.title} description={product.description}                              brand={product.brand}                              price={product.price} rating={product.rating} key={product.id}/>))            }            </tbody>            {                (data != null) && <Pagination handlerPrevNext={handlerPrevNext} buttons={arrOfCurrButtons} handlerSetCurrentPage={handlerSetCurrentPage} handlerSetPerPage={handlerSetPerPage} perPage={perPage} currentPage={currentPage}                />            }        </table>    );}export default Table;