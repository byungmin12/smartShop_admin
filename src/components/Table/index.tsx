import React, {useCallback, useEffect, useState} from 'react';import "../../styles/Table.css"import {useQuery} from "@tanstack/react-query";import TableHeader from "./TableHeader";import TableRow from "./TableRow";import Pagination from "../Pagination";import apis from "../../service/apis";import {IDataDto, IProduct} from "../../Dto/Dto";const handlerCheckIncludes = (key: string, value: string | null): boolean => {    if (value !== null) {        const upperKey = key.toUpperCase()        const upperValue = value.toUpperCase()        return upperKey.includes(upperValue)    }    return false}function Table() {    const {data: randomRefresh} = useQuery(['randomRefresh'], {        initialData: Math.random,        staleTime: Infinity,    });    const {        data,        isError,        isLoading    } = useQuery<IDataDto, any, IProduct[]>(["fetchingProductsData", "randomRefresh", randomRefresh], async () => apis.get("https://dummyjson.com/products?limit=100"), {            select: (selectedData) => {                const search = sessionStorage.getItem("search");                const category = sessionStorage.getItem("category");                switch (true) {                    case category === "상품명" && search !== "":                        return selectedData.products.filter((product) => handlerCheckIncludes(product.title, search)                        )                    case category === "브랜드" && search !== "":                        return selectedData.products.filter((product) => handlerCheckIncludes(product.brand, search))                    case category === "상품내용" && search !== "":                        return selectedData.products.filter((product) => handlerCheckIncludes(product.description, search))                    case category === "전체" && search !== "":                        return selectedData.products.filter((product) => handlerCheckIncludes(product.title, search) || handlerCheckIncludes(product.brand, search) || handlerCheckIncludes(product.description, search))                    default :                        return selectedData.products                }            }        }    )    const [pageLimit, setPageLimit] = useState(10)    const [pageNumber, setPageNumber] = useState(1)    const [paginationButtonNumber, setPaginationButtonNumber] = useState(5)    useEffect(() => {        if (data != null) {            if (pageNumber < 5 || pageNumber + 3 >= data.length / pageLimit) {                setPaginationButtonNumber(5)            } else {                setPaginationButtonNumber(3)            }        }    }, [pageLimit, pageNumber, data])    const handlerChangePageLimit = useCallback(        (e: React.ChangeEvent<HTMLSelectElement>) => {            if (Number(e.target.value) === pageLimit) return            setPageLimit(Number(e.target.value))            setPageNumber(1)        },        [pageLimit],    );    const handlerChangePageNumber = useCallback((direction?: "plus" | "minus") => (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {        if (direction === "plus") {            setPageNumber((prev) => prev + 1)        } else if (direction === "minus") {            setPageNumber((prev) => prev - 1)        } else {            setPageNumber(() => Number(e.currentTarget.value))        }    }, [])    return (        <table className="table-wrapper">            <TableHeader fields={["상품번호", "상품명", "브랜드", "상품내용", "가격", "평점", "재고"]}/>            <tbody>            {                isLoading &&                <tr>                    <td colSpan={7}>Loading...</td>                </tr>            }            {                isError &&                <tr>                    <td colSpan={7}>에러가 발생했습니다.</td>                </tr>            }            {                data?.slice((pageNumber - 1) * pageLimit, pageNumber * pageLimit).map((product) => (                    <TableRow id={product.id} title={product.title} description={product.description}                              brand={product.brand}                              price={product.price} rating={product.rating} key={product.id}/>))            }            </tbody>            {                (data != null) && < Pagination pageLimit={pageLimit} pageNumber={pageNumber}                                               paginationButtonNumber={paginationButtonNumber}                                               dataLength={data.length} handlerChangePageLimit={handlerChangePageLimit}                                               handlerChangePageNumber={handlerChangePageNumber}/>            }        </table>    );}export default Table;